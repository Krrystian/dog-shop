generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  image          String?
  emailVerified  DateTime?
  hashedPassword String?
  role           String        @default("user")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  accounts       Account[]
  orders         OrderHeader[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  price         String
  image         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  categoriesIds String[]        @db.ObjectId
  category      Category[]      @relation(fields: [categoriesIds], references: [id])
  ProductDetail ProductDetail[]
  orderDetail   OrderDetail[]
}

model ProductDetail {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String?  @db.ObjectId
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  productsIds String[]  @db.ObjectId
  products    Product[] @relation(fields: [productsIds], references: [id])
}

model OrderDetail {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  quantity         Int
  transactionPrice Float
  Product          Product?     @relation(fields: [productId], references: [id])
  productId        String?      @db.ObjectId
  OrderHeader      OrderHeader? @relation(fields: [orderHeaderId], references: [id])
  orderHeaderId    String?      @db.ObjectId
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model DeliveryPlace {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  country     String
  city        String
  zipCode     String
  street      String
  houseNumber String
  OrderHeader OrderHeader[]
}

model OrderHeader {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  orderDetail     OrderDetail[]
  deliveryPlace   DeliveryPlace @relation(fields: [deliveryPlaceId], references: [id])
  deliveryPlaceId String        @db.ObjectId
  User            User?         @relation(fields: [userId], references: [id])
  userId          String?       @db.ObjectId
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
